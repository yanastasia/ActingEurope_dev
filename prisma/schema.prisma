// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  email              String    @unique @db.VarChar(255)
  password_hash      String    @db.VarChar(255)
  first_name         String    @db.VarChar(100)
  last_name          String    @db.VarChar(100)
  phone              String?   @db.VarChar(20)
  is_admin           Boolean   @default(false)
  email_notifications Boolean   @default(true)
  marketing_preferences Boolean   @default(false)
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  bookings           Booking[]

  @@map("users")
}

model Theatre {
  id          Int             @id @default(autoincrement())
  name        String          @db.VarChar(255)
  city        String          @db.VarChar(100)
  country     String          @db.VarChar(100)
  description String?         @db.Text
  history     String?         @db.Text
  website     String?         @db.VarChar(255)
  founded_year Int?
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  images      TheatreImage[]
  tags        TheatreTag[]
  events      Event[]

  @@map("theatres")
}

model TheatreImage {
  id         Int      @id @default(autoincrement())
  theatre_id Int
  image_url  String   @db.VarChar(500)
  caption    String?  @db.VarChar(255)
  is_primary Boolean  @default(false)
  created_at DateTime @default(now())
  theatre    Theatre  @relation(fields: [theatre_id], references: [id], onDelete: Cascade)

  @@map("theatre_images")
}

model TheatreTag {
  id         Int      @id @default(autoincrement())
  theatre_id Int
  tag_name   String   @db.VarChar(100)
  created_at DateTime @default(now())
  theatre    Theatre  @relation(fields: [theatre_id], references: [id], onDelete: Cascade)

  @@map("theatre_tags")
}

model Venue {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(100)
  description  String?        @db.Text
  capacity     Int
  created_at   DateTime       @default(now())
  sections     VenueSection[]
  events       Event[]

  @@map("venues")
}

model VenueSection {
  id           Int      @id @default(autoincrement())
  venue_id     Int
  section_name String   @db.VarChar(50)
  section_type SectionType
  created_at   DateTime @default(now())
  venue        Venue    @relation(fields: [venue_id], references: [id], onDelete: Cascade)
  seats        Seat[]

  @@map("venue_sections")
}

enum SectionType {
  regular
  balcony
}

model Seat {
  id             Int          @id @default(autoincrement())
  venue_section_id Int
  row_number     Int
  seat_number    Int
  is_available   Boolean      @default(true)
  created_at     DateTime     @default(now())
  venueSection   VenueSection @relation(fields: [venue_section_id], references: [id], onDelete: Cascade)
  booked_seats   BookedSeat[]

  @@unique([venue_section_id, row_number, seat_number], name: "unique_seat")
  @@map("seats")
}

model Event {
  id             Int        @id @default(autoincrement())
  title          String     @db.VarChar(255)
  theatre_id     Int
  venue_id       Int
  event_type     EventType
  event_date     DateTime   @db.Date
  event_time     DateTime   @db.Time(3)
  duration_minutes Int?
  description    String?
  price          Decimal    @db.Decimal(10, 2)
  image_url      String?    @db.VarChar(500)
  language       String?    @db.VarChar(50)
  genre          String?    @db.VarChar(100)
  is_featured    Boolean    @default(false)
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  theatre        Theatre    @relation(fields: [theatre_id], references: [id])
  venue          Venue      @relation(fields: [venue_id], references: [id])
  bookings       Booking[]

  @@map("events")
}

enum EventType {
  performance
  workshop
  discussion
}

model Booking {
  id              Int        @id @default(autoincrement())
  user_id         Int
  event_id        Int
  booking_reference String     @unique @db.VarChar(50)
  total_amount    Decimal    @db.Decimal(10, 2)
  booking_status  BookingStatus @default(pending)
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  user            User       @relation(fields: [user_id], references: [id])
  event           Event      @relation(fields: [event_id], references: [id])
  booked_seats    BookedSeat[]

  @@map("bookings")
}

enum BookingStatus {
  pending
  confirmed
  cancelled
}

model BookedSeat {
  id         Int      @id @default(autoincrement())
  booking_id Int
  seat_id    Int
  created_at DateTime @default(now())
  booking    Booking  @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  seat       Seat     @relation(fields: [seat_id], references: [id])

  @@unique([booking_id, seat_id], name: "unique_booked_seat")
  @@map("booked_seats")
}

model NewsArticle {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  excerpt     String?  @db.Text
  content     String   @db.Text
  category    String?  @db.VarChar(100)
  image_url   String?  @db.VarChar(500)
  author      String?  @db.VarChar(100)
  published_at DateTime?
  is_published Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("news_articles")
}
